openapi: 3.0.0
info:
  title: Task Management API
  version: 1.0.0
  description: A RESTful API for managing tasks and users in a task management system.

servers:
  - url: http://localhost:5000/api
    description: Local development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
        username:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [admin, manager, user]
        isVerified:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Task:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        description:
          type: string
        dueDate:
          type: string
          format: date-time
        priority:
          type: string
          enum: [low, medium, high]
        status:
          type: string
          enum: [todo, in_progress, completed]
        assignedTo:
          $ref: '#/components/schemas/User'
        createdBy:
          $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
        '400':
          description: Username or email already exists
        '500':
          description: Error registering user

  /auth/login:
    post:
      summary: Login user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
        '401':
          description: Invalid credentials
        '500':
          description: Error logging in

  /auth/logout:
    post:
      summary: Logout user
      tags:
        - Authentication
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /users/profile:
    get:
      summary: Get user profile
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '500':
          description: Error fetching user profile

    put:
      summary: Update user profile
      tags:
        - Users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
      responses:
        '200':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '500':
          description: Error updating user profile

  /users:
    get:
      summary: Get all users
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    username:
                      type: string
        '500':
          description: Error fetching users

  /tasks:
    post:
      summary: Create a new task
      tags:
        - Tasks
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                dueDate:
                  type: string
                  format: date-time
                priority:
                  type: string
                  enum: [low, medium, high]
                status:
                  type: string
                  enum: [todo, in_progress, completed]
                assignedTo:
                  type: string
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  task:
                    $ref: '#/components/schemas/Task'
        '400':
          description: Missing required fields
        '403':
          description: Not authorized to create tasks
        '500':
          description: Error creating task

    get:
      summary: Get all tasks
      tags:
        - Tasks
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Tasks retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '500':
          description: Error fetching tasks

  /tasks/new:
    get:
      summary: Get new task form
      tags:
        - Tasks
      security:
        - BearerAuth: []
      responses:
        '200':
          description: New task form retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '500':
          description: Error preparing new task form

  /tasks/stats:
    get:
      summary: Get task statistics
      tags:
        - Tasks
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Task statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalTasks:
                    type: number
                  completedTasks:
                    type: number
                  pendingTasks:
                    type: number
        '500':
          description: Error fetching task stats

  /tasks/{id}:
    get:
      summary: Get a task by ID
      tags:
        - Tasks
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Task not found
        '500':
          description: Error fetching task

    put:
      summary: Update a task
      tags:
        - Tasks
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  task:
                    $ref: '#/components/schemas/Task'
        '403':
          description: Not authorized to update this task
        '404':
          description: Task not found
        '500':
          description: Error updating task

    delete:
      summary: Delete a task
      tags:
        - Tasks
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '403':
          description: Not authorized to delete tasks
        '404':
          description: Task not found
        '500':
          description: Error deleting task